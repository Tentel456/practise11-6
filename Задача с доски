class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        raise IndexError("Берешь из пустого стека")

    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        raise IndexError("из пустого стека")

    def size(self):
        return len(self.items)

def is_balanced(expression):
    stack = Stack()
    opening = "([{<"
    closing = ")]}>"
    matches = {')': '(', ']': '[', '}': '{', '>': '<'}

    for char in expression:
        if char in opening:
            stack.push(char)
        elif char in closing:
            if stack.is_empty() or stack.pop() != matches[char]:
                return False

    return stack.is_empty()

if __name__ == "__main__":
    expression = input("Введите скобочное выражение: ")
    if is_balanced(expression):
        print("Скобочное выражение правильно.")
    else:
        print("Скобочное выражение неправильно.")
